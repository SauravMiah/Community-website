// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Server.Models;
using Server.Models.Database;
using System;

namespace Server.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20180401215007_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("frostlings")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("Server.Models.Database.DiscordUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DiscordTag")
                        .IsRequired();

                    b.Property<string>("DiscordUid")
                        .IsRequired();

                    b.Property<string>("Summary");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("DiscordUsers");
                });

            modelBuilder.Entity("Server.Models.Database.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<long>("OrganizerId");

                    b.Property<string>("Summary")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<long>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Server.Models.Database.EventType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("Server.Models.Database.Game", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("SteamId");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Server.Models.Database.GameServer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("GameId");

                    b.Property<string>("Ip");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("OwnerId");

                    b.Property<string>("Summary");

                    b.Property<int>("Type");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("GameServers");
                });

            modelBuilder.Entity("Server.Models.Database.GiveAwayKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AcquiredById");

                    b.Property<long>("GameId");

                    b.Property<string>("Key")
                        .IsRequired();

                    b.Property<long>("PlatformId");

                    b.Property<long>("SuppliedById");

                    b.HasKey("Id");

                    b.HasIndex("AcquiredById");

                    b.HasIndex("GameId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("SuppliedById");

                    b.ToTable("GiveAwayKeys");
                });

            modelBuilder.Entity("Server.Models.Database.PollAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer")
                        .IsRequired();

                    b.Property<long>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("PollAnswers");
                });

            modelBuilder.Entity("Server.Models.Database.PollQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowMultipleAnswers");

                    b.Property<DateTime>("EndDate");

                    b.Property<long>("PollerId");

                    b.Property<string>("Question")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("PollerId");

                    b.ToTable("PollQuestions");
                });

            modelBuilder.Entity("Server.Models.Database.PollVote", b =>
                {
                    b.Property<long>("AnswerId");

                    b.Property<long>("VoterId");

                    b.HasKey("AnswerId", "VoterId");

                    b.HasIndex("VoterId");

                    b.ToTable("PollVotes");
                });

            modelBuilder.Entity("Server.Models.Database.SocialPlatform", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Icon");

                    b.Property<string>("Image");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("SocialPlatforms");
                });

            modelBuilder.Entity("Server.Models.Database.UserProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("PlatformId");

                    b.Property<string>("Url");

                    b.Property<long>("UserId");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Server.Models.Database.Event", b =>
                {
                    b.HasOne("Server.Models.Database.DiscordUser", "Organizer")
                        .WithMany("Events")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Server.Models.Database.EventType", "Type")
                        .WithMany("Events")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Server.Models.Database.GameServer", b =>
                {
                    b.HasOne("Server.Models.Database.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Server.Models.Database.DiscordUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Server.Models.Database.GiveAwayKey", b =>
                {
                    b.HasOne("Server.Models.Database.DiscordUser", "AcquiredBy")
                        .WithMany("GiveAwayKeyAcquirers")
                        .HasForeignKey("AcquiredById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Server.Models.Database.Game", "Game")
                        .WithMany("GiveAwayKeys")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Server.Models.Database.SocialPlatform", "Platform")
                        .WithMany("GiveAwayKeys")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Server.Models.Database.DiscordUser", "SuppliedBy")
                        .WithMany("GiveAwayKeySuppliers")
                        .HasForeignKey("SuppliedById")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Server.Models.Database.PollAnswer", b =>
                {
                    b.HasOne("Server.Models.Database.PollQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Server.Models.Database.PollQuestion", b =>
                {
                    b.HasOne("Server.Models.Database.DiscordUser", "Poller")
                        .WithMany("PollQuestions")
                        .HasForeignKey("PollerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Server.Models.Database.PollVote", b =>
                {
                    b.HasOne("Server.Models.Database.PollAnswer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Server.Models.Database.DiscordUser", "Voter")
                        .WithMany("PollVotes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Server.Models.Database.UserProfile", b =>
                {
                    b.HasOne("Server.Models.Database.SocialPlatform", "Platform")
                        .WithMany("Profiles")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Server.Models.Database.DiscordUser", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
